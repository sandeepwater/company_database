CREATE TABLE employee(
emp_id INT PRIMARY KEY,
first_name VARCHAR(40),
last_name VARCHAR(40),
birth_day DATE,
sex VARCHAR(1),
salary INT,
super_id INT,
branch_id INT
);
describe employee;

CREATE TABLE branch(
branch_id INT PRIMARY KEY,
branch_name VARCHAR(40),
mgr_id INT,
mgr_start_date DATE,
FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);
describe branch;

ALTER TABLE employee 
ADD FOREIGN KEY(branch_id) 
REFERENCES branch(branch_id)
ON DELETE SET NULL;
ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

CREATE TABLE client(
client_id INT PRIMARY KEY,
client_name VARCHAR(40),
branch_id INT,
FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

describe client;

CREATE TABLE works_with( 
emp_id INT,
client_id INT,
total_sales INT,
PRIMARY KEY(emp_id,client_id),
FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);
describe works_with;

CREATE TABLE branch_supplier(
branch_id INT,
supplier_name VARCHAR(40),
supply_type VARCHAR(40),
PRIMARY KEY (branch_id, supplier_name),
FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE 
);
describe branch_supplier;

INSERT INTO employee VALUES(100,'David','Wallace','1967-11-17','M',250000,NULL,NULL);
SELECT * FROM employee;
INSERT INTO branch VALUES(1,'Corporate',100,'2006-02-09');
SELECT * FROM branch;
UPDATE employee
SET branch_id=1 
WHERE emp_id=100;
INSERT INTO employee VALUES(101,'Jan','Levinson','1961-05-11','F',110000,100,1);
SELECT * FROM employee;

INSERT INTO employee VALUES(102,'Michael','Scott','1964-03-15','M',75000,100,NULL);
SELECT * FROM employee;
INSERT INTO branch VALUES(2,'Scranton',102,'1992-04-06');
SELECT * FROM branch;
UPDATE employee
SET branch_id=2 
WHERE emp_id=102;
INSERT INTO employee VALUES(103,'Angela','Martin','1971-06-25','F',63000,102,2);
INSERT INTO employee VALUES(104,'Kelly','Kapoor','1980-02-05','F',55000,102,2);
INSERT INTO employee VALUES(105,'Stanley','Hudson','1958-02-19','M',69000,102,2);
SELECT * FROM employee;


INSERT INTO employee VALUES(106,'Josh','Porter','1969-09-05','M',78000,100,NULL);
SELECT * FROM employee;
INSERT INTO branch VALUES(3,'Stamford',106,'1998-02-13');
SELECT * FROM branch;
UPDATE employee
SET branch_id=3 
WHERE emp_id=106;
INSERT INTO employee VALUES(107,'Andy','Bernard','1973-07-22','M',65000,106,3);
INSERT INTO employee VALUES(108,'Jim','Halpert','1978-10-01','M',71000,106,3);
SELECT * FROM employee;

SELECT * FROM branch_supplier;
DESCRIBE branch_supplier;
DROP TABLE branch_supplier;
INSERT INTO branch_supplier values(2,'Hammer Mill','Paper');
INSERT INTO branch_supplier values(2,'Uni-ball','Writing Utensils');
INSERT INTO branch_supplier values(3,'Patriot Paper','Paper');
INSERT INTO branch_supplier values(2,'J.T. Forms & Labels','Custom Forms');
INSERT INTO branch_supplier values(3,'Uni-ball','Writing Utensils');
INSERT INTO branch_supplier values(3,'Hammer Mill','Paper');
INSERT INTO branch_supplier values(3,'Stamford Lables','Custom Forms');

DESCRIBE client;
SELECT * FROM client;
INSERT INTO client values(400,'Dunmore Highschool',2);
INSERT INTO client values(401,'Lackawana Country',2);
INSERT INTO client values(402,'FedEx',3);
INSERT INTO client values(403,'John Daly Law, LLC',3);
INSERT INTO client values(404,'Scranton Whitepages',2);
INSERT INTO client values(405,'Times Newspaper',3);
INSERT INTO client values(406,'FedFx',2);

DESCRIBE works_with;
SELECT * FROM works_with;
INSERT INTO works_with values(105,400,55000);
INSERT INTO works_with values(102,401,267000);
INSERT INTO works_with values(108,402,22500);
INSERT INTO works_with values(107,403,5000);
INSERT INTO works_with values(108,403,12000);
INSERT INTO works_with values(105,404,33000);
INSERT INTO works_with values(107,405,26000);
INSERT INTO works_with values(102,406,15000);
INSERT INTO works_with values(105,406,130000);
DELETE FROM works_with WHERE client_id=400;



SELECT * 
FROM client;

SELECT * 
FROM employee;
SELECT * 
FROM employee 
ORDER BY salary DESC;
SELECT * 
FROM employee
ORDER BY sex DESC;
SELECT * 
FROM employee
ORDER BY branch_id DESC;
SELECT * 
FROM employee
ORDER BY birth_day DESC;
SELECT * 
FROM employee
ORDER BY super_id DESC ;
SELECT * 
FROM employee
ORDER BY birth_day DESC;
SELECT * 
FROM employee
ORDER BY sex, first_name,last_name;
SELECT * 
FROM employee
ORDER BY sex, first_name;
SELECT * 
FROM employee
LIMIT 5;
SELECT * 
FROM employee
ORDER BY emp_id DESC
LIMIT 5;
SELECT * 
FROM employee
ORDER BY sex ASC
LIMIT 5;

SELECT first_name, last_name
FROM employee;
DESC employee;

SELECT first_name AS forename, last_name AS surname
FROM employee;

-- Find out all the different genders
SELECT DISTINCT sex
FROM employee;

-- Find out all the different genders but in descending order
SELECT DISTINCT sex 
FROM employee
ORDER BY sex ASC;

-- Find out all the different branch_id but in descending order
SELECT DISTINCT branch_id 
FROM employee ;

SELECT DISTINCT branch_id 
FROM employee 
ORDER BY branch_id DESC;

SELECT DISTINCT branch_id 
FROM employee 
ORDER BY branch_id DESC;

-- Find the number of employees
SELECT COUNT(emp_id)
FROM employee;

-- Find the branch_id of employees
SELECT COUNT(branch_id) 
FROM employee;

-- Find the sex of employees
SELECT COUNT(sex) 
FROM employee;

-- Find the super_id of employees
SELECT COUNT(super_id) 
FROM employee;

-- Find the number of female employees bornn after 1970
SELECT COUNT(emp_id) 
FROM employee
WHERE sex='F' AND birth_day < '1970-01-01';
SELECT* FROM employee;

-- FIND the average of all employee's salaries
SELECT AVG(salary)
FROM employee;

-- FIND the average of all employee's salaries of all male employee
SELECT AVG(salary)
FROM employee
WHERE sex='M';

-- FIND the sum of all employee's salaries
SELECT SUM(salaRY) 
FROM employee 
WHERE sex='M';

SELECT COUNT(sex) 
FROM employee 
;

SELECT COUNT(sex) 
FROM employee 
WHERE sex='M';

SELECT COUNT(sex) , sex
FROM employee 
WHERE sex='M';

-- FIND the count of male and female employee group by column sex
SELECT COUNT(sex) , sex
FROM employee 
GROUP BY sex;

SELECT COUNT(birth_day) , sex
FROM employee 
GROUP BY sex;

-- Find the tatal_sales of each sales man
SELECT SUM(total_sales), emp_id
FROM works_with
GROUP BY emp_id;

SELECT SUM(total_sales), emp_id
FROM works_with
GROUP BY emp_id
ORDER BY emp_id DESC;

SELECT SUM(total_sales), client_id
FROM works_with
GROUP BY client_id;







-- Find any client' who wre an LLC
SELECT * 
FROM client
WHERE client_name LIKE '%LLC';



-- Find any client's who wre an LLC
SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '%ball';
SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE 'Hammer%';

-- will not work
SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE 'mmer%';

SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '%ball%';
SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '%Lables%';
SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '%er M%';

SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '%mme%';

SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '%&%';

SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '% &%';

SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '% Mill%';

SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '%Mill%';

SELECT * 
FROM employee
WHERE birth_day LIKE '____-10%';

SELECT * 
FROM employee
WHERE birth_day LIKE '____-02%';

SELECT * 
FROM employee
WHERE birth_day LIKE '%__-10%';


-- Find any clients who are schools
SELECT * 
FROM client
WHERE client_name LIKE '%school';

-- Find any clients who are schools
SELECT * 
FROM client
WHERE client_name LIKE '%school%';




-- UNION
SELECT first_name
FROM employee;

SELECT branch_name
FROM branch;

SELECT first_name
FROM employee
UNION
SELECT branch_name
FROM branch;

-- created problem
SELECT first_name,last_name
FROM employee
UNION
SELECT branch_name
FROM branch;

-- Union From three table
SELECT first_name
FROM employee
UNION
SELECT branch_name
FROM branch
UNION
SELECT client_name
FROM client;



-- Union From three table
SELECT first_name
FROM employee
UNION
SELECT branch_name
FROM branch
UNION
SELECT client_name
FROM client;

-- Union From three table with given column name
SELECT first_name AS Company_Names
FROM employee 
UNION
SELECT branch_name
FROM branch
UNION
SELECT client_name
FROM client;

-- Find a list of all clients & branch supplier's names
SELECT client_name
FROM client
UNION
SELECT supplier_name
FROM branch_supplier;

-- Find a list of all clients and branch_id & branch_id and branch supplier's names
SELECT client_name, branch_id
FROM client
UNION
SELECT supplier_name,branch_id
FROM branch_supplier;


-- Find a list of all clients and branch_id & branch_id and branch supplier's names
SELECT client_name AS a, branch_id AS b
FROM client
UNION
SELECT supplier_name,branch_id
FROM branch_supplier;

-- Find a list of all money spent or earned by the company
SELECT salary
FROM employee
UNION
SELECT total_sales
FROM works_with;



-- JOIN 
Insert INTO branch VALUES(4,'Baffalo',NULL,NULL);
SELECT * FROM branch;

-- FIND all branches and the names of their managers
SELECT employee.emp_id,employee.first_name,branch.branch_name
FROM employee
JOIN branch
ON employee.emp_id=branch.mgr_id;

SELECT employee.emp_id,employee.first_name,branch.branch_name
FROM branch
JOIN employee
ON employee.emp_id=branch.mgr_id;

SELECT branch.branch_name
FROM branch
JOIN employee
ON employee.emp_id=branch.mgr_id;

SELECT branch.branch_name
FROM branch
JOIN employee
ON employee.emp_id=branch.mgr_id
WHERE employee.emp_id=100;

SELECT branch.branch_name
FROM branch
JOIN employee
ON employee.emp_id=branch.mgr_id
WHERE employee.emp_id>100 AND employee.emp_id<107;

SELECT branch.branch_name
FROM branch
JOIN employee
ON employee.emp_id=branch.mgr_id
WHERE (employee.emp_id>100 AND employee.emp_id<107) 
AND branch.mgr_id<106;

-- LEFT JOIN
SELECT employee.emp_id,employee.first_name, branch.branch_name
FROM employee
LEFT JOIN branch
ON employee.emp_id=branch.mgr_id;

-- LEFT JOIN
SELECT employee.emp_id,employee.first_name, branch.branch_name
FROM branch
LEFT JOIN employee
ON employee.emp_id=branch.mgr_id;

-- RIGHT JOIN
SELECT employee.emp_id,employee.first_name, branch.branch_name
FROM branch
RIGHT JOIN employee
ON employee.emp_id=branch.mgr_id;




-- NESTED QUERY

SELECT works_with.emp_id
FROM works_with
WHERE works_with.total_sales>30000;

SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (
    SELECT works_with.emp_id
    FROM works_with
    WHERE works_with.total_sales>30000
);
-- = this sigh is applicable for only one result
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id = (
    SELECT works_with.emp_id
    FROM works_with
    WHERE works_with.total_sales>200000
);
SELECT * FROM employee;

--  FIND all clients who are handled by the branch
-- that Michael Scott manages
-- Assume you know Michael's ID
SELECT branch.branch_id
FROM branch
WHERE branch.mgr_id=102;

SELECT client.client_name
FROM client
WHERE client.branch_id = (
    SELECT branch.branch_id
FROM branch
WHERE branch.mgr_id=102
);

SELECT client.client_name
FROM client
WHERE client.branch_id = (
    SELECT branch.branch_id
FROM branch
WHERE branch.mgr_id=102
LIMIT 1
);

SELECT client.client_name
FROM client
WHERE client.branch_id IN (
    SELECT branch.branch_id
FROM branch
WHERE branch.mgr_id=102
);






-- On DELETE
CREATE TABLE branch(
branch_id INT PRIMARY KEY,
branch_name VARCHAR(40),
mgr_id INT,
mgr_start_date DATE,
FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);
SELECT * FROM branch;
SELECT * FROM employee;
DELETE FROM branch WHERE branch_id=3;
DELETE FROM employee
WHERE emp_id = 102;


-- ON DELETE CASCADE
CREATE TABLE branch_supplier(
branch_id INT,
supplier_name VARCHAR(40),
supply_type VARCHAR(40),
PRIMARY KEY (branch_id, supplier_name),
FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE 
);

DELETE FROM branch
WHERE branch_id = 3;  
SELECT * FROM branch;
SELECT * FROM employee;
SELECT * FROM branch_supplier;







-- CREATE trigger
CREATE TABLE trigger_test(
   message VARCHAR(100)
);
SELECT * FROM trigger_test;

--  added new employee
DELIMITER $$
CREATE 
    TRIGGER my_trigger BEFORE INSERT
    ON employee 
    FOR EACH ROW BEGIN
         INSERT INTO trigger_test VALUES ('added new employee'); 
    END$$
DELIMITER ;

INSERT INTO employee
VALUES (109,'Oscar','Martinez','1968-02-19','M',69000,106,3);

SELECT * FROM trigger_test;


-- NEW.first_name
DELIMITER $$
CREATE 
    TRIGGER my_trigger2 BEFORE INSERT
    ON employee 
    FOR EACH ROW BEGIN
         INSERT INTO trigger_test VALUES (NEW.first_name); 
    END$$
DELIMITER ;

INSERT INTO employee 
VALUES (110,'Kelvin','Malone','1978-02-19','M',69000,106,3);
DELETE FROM employee WHERE emp_id=110;

SELECT * FROM trigger_test;



-- trigger IF ELSE IF ELSE
DELIMITER $$
CREATE 
    TRIGGER my_trigger4 BEFORE INSERT
    ON employee 
    FOR EACH ROW BEGIN
      IF NEW.sex ='M' THEN
         INSERT INTO trigger_test VALUES ('added male employee'); 
	  ELSEIF NEW.sex = 'F' THEN
         INSERT INTO trigger_test VALUES ('added female employee');
	  ELSE
         INSERT INTO trigger_test VALUES ('added other employee');
	  END IF;
    END$$
DELIMITER ;

INSERT INTO employee 
VALUES (111,'Pam','Beesly','1988-02-19','F',69000,106,3);
DELETE FROM employee WHERE emp_id=110;

SELECT * FROM trigger_test;




-- trigger IF ELSE IF ELSE and for DELETE
DELIMITER $$
CREATE 
    TRIGGER my_trigger3 BEFORE DELETE
    ON employee 
    FOR EACH ROW BEGIN
         INSERT INTO trigger_test VALUES ('deleted'); 
    END$$
DELIMITER ;


DELETE FROM employee WHERE emp_id=111;

SELECT * FROM trigger_test;



-- trigger IF ELSE IF ELSE and for DELETE
DELIMITER $$
CREATE 
    TRIGGER my_trigger4 BEFORE DELETE
    ON employee 
    FOR EACH ROW BEGIN
         INSERT INTO trigger_test VALUES (OLD.first_name); 
    END$$
DELIMITER ;


DELETE FROM employee WHERE emp_id=110;

SELECT * FROM trigger_test;



